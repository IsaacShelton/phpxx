
// This is a comment
# This is also a comment
echo 1 + 2
echo 1 - 2
echo 1 * 2
echo 1 / 2
echo "i is the ninth letter in the alphabet" / "alpha"
echo "This has seven characters:removed" - 7
echo "This is reversed and has seven characters:removed" - -7
echo " This" * -3

# Ha ha, semicolons are single character comments
echo "You could use a semicolon like a good citizen";
echo "But why would you do that" echo -n "When you can do this" echo "?"

# Variables use '$' prefix
$firstname = "Isaac"
$lastname = "Shelton"

# up() and down() can be used to create opaque scopes
# Variables not found in the scope will NOT be able to access parent scopes
up()
// Will print 'void' since (void + str + void + str = void)
echo $firstname + " " + $lastname + "!"
down()

# push() and pop() can be used to create transparent scopes
# Variables not found in the scope will be able to access parent scopes
push()
// Will print 'Isaac Shelton!'
echo $firstname + " " + $lastname + "!"
pop()

function getname ($test1, $test2, $test3) {
    echo $test1
    echo $test2
    echo $test3
    echo "args() = " + args()
    throw(arr("isaac", "shelton"))
}

$names = arr(1, 2, 3, 4, arr(5, 6, 7, arr(8, 9, 10)))
$other = arr(1, 2, 3, 4)
echo "$names = " + $names
echo "repr($names) = " + repr($names)
echo "aka($names, $other) = " + aka($names, $other)
echo "eq($names, $other) = " + eq($names, $other)
echo "getname() = " + getname("haha", "johnothan", 1, " am", "not ", "your", "daughter")

$i = 0
while lt($i, 10) {
    echo "loopin' " + $i
    $i = $i + 1
}

function echostaircase($arr, $ident) {
    $i = 0
    $ident = 0 + $ident

    if not(eq(repr($arr), "[]")) {
        echo "{echostaircase - not an array}"
        throw()
    }

    while lt($i, count($arr)) {
        $val = get($arr, $i)
        if eq(repr($val), "[]") {
            echostaircase($val, 1 + $ident)
        } else {
            $j = 0
            while lt($j, $ident) {
                echo -n "--> "
                $j = $j + 1
            }
            
            echo $val
        }
        $i = $i + 1
    }
}

function not($a) {
    if $a {
        throw(0)
    } else {
        throw(1)
    }
}

// Prints staircase, since first argument is an array as expected
echostaircase($names)
// Prints "{echostaircase - not an array}", since first argument is 1
echostaircase(.. $names)

// Parentheses
echo 1 + 2 * 3
echo 1 + (2 * 3)
echo ((1 + (2 * 3)) + 1) * 2
